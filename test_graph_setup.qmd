---
title: Graphing around with Solr
subtitle: Notes on querying graphs in Solr
date: 2022-08-30
jupyter: python3
format:
  html:
    toc: true
    theme:
      - cosmo
    code-fold: true
    code-tools: true
    code-summary: "Show the code"
    code-line-numbers: true
---

# Setup

## Editing

Setup your [Quarto](https://quarto.org/) environment and install some dependencies into your environment:

```
jupyter 
graphviz 
tabulate 
jupyter-cache
```

Checkout this project and navigate to its root folder. Start the docker instance for Solr as described below, then run `quarto preview` to generate pages and open in a browser. Edits to pages are re-rendered and the browser refreshed on save.

## Solr Instance

A Solr instance is needed to build these documents, and it is assumed the Solr service is available on port `18983`. A minimal Solr instance can be deployed using docker and this `docker-compose.yml`:

```{.yaml}
version: '3'
services:
  solr:
    image: solr
    ports:
      - "18983:8983"
    volumes:
      - "solrdata:/var/solr"
    command: solr -f -cloud
volumes:
  solrdata:
```

Start it up like `docker-compose up -d`.

With the Solr instance running, we can create the test collection and populate it with the example graph documents.

```{python}
import example_graph
import graphutzing

solr = graphutzing.SolrConnection()
print("Deleting collection...")
solr.deleteCollection()
print("Creating collection...")
solr.createCollection()
print("Adding _nest_parent_ field to collection...")
solr.addField("_nest_parent_")
print("Populating index with test documents...")
ndocs = 0
for doc in example_graph.docs:
    ndocs += solr.addDocument(doc)
print(f"Added {ndocs} documents")
```


## Publishing to GitHub Pages

This site is published to Github Pages using the Quarto [`publish gh-pages`](https://quarto.org/docs/publishing/github-pages.html#publish-command) option. For example:

```
# First, commit and push edits
# Then publish
quarto publish gh-pages
```
